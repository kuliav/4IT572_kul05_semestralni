- name: Deploy to EC2
  hosts: localhost
  connection: local

  tasks: 
    - name: Launch EC2 Instance
      ec2_instance: 
        instance_type: t2.medium
        image_id: ami-04e5276ebb8451442
        region: us-east-1
        key_name: test
        vpc_subnet_id: subnet-0faf05e5799eeb185
        tags:
          Name: Eshop
        count: 1
        security_group: eshop
        network:
          assign_public_ip: yes
        wait: yes
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        security_token: "{{ session_token }}"
      register: ec2_instance_result

    - name: Add instance host to group
      add_host:
        hostname: "{{ item.public_ip_address }}"
        groupname: launched
      loop: "{{ ec2_instance_result.instances }}"

    - name: Wait for SSH connection
      delegate_to: "{{ item.public_dns_name }}"
      wait_for_connection:
        delay: 30
        timeout: 300
      loop: "{{ ec2_instance_result.instances }}"

- name: Configure EC2 Instances
  hosts: launched
  connection: ssh
  become: yes

  tasks:
    - name: Install Git and Docker
      yum:
        name:
          - git
          - docker
        state: latest
        update_cache: yes
    - service:
        name: docker
        state: started
        enabled: yes
    - name: Set proper rights to Docker service
      shell: usermod -a -G docker ec2-user

    - name: Fetch eshop from Git
      git:
        repo: "https://github.com/kuliav/4IT572_kul05_semestralni.git" 
        dest: ./app

    - name: Build Eshop Docker image
      docker_image: 
        build:
          path: ./app
        name: eshop
        tag: latest
        source: build
      
    - name: Run Eshop docker
      docker_container:
        name: eshop
        image: eshop
        state: started
        ports:
          - "80:3000"
          
    - name: Wait for eshop to run
      wait_for:
        port:
          80
  
    - name: Limit the instances count
      hosts: localhost
      tasks:
        - name: Limit to 1
          amazon.aws.ec2_instance:
            region: us-east-1
            count_tag:
            Name: "Eshop"
            exact_count: 1
            wait: yes
            aws_access_key: "{{ access_key }}"
            aws_secret_key: "{{ secret_key }}"
            security_token: "{{ session_token }}"

  Deploy:
    needs: [Build, Test]
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest

    steps:
      - name: Code checkout
        uses: actions/checkout@v4.1.1
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}

      - name: Load node modules and build folder
        uses: actions/cache@v3.3.2
        with:
          path: |
            ~/.npm
            ./node_modules
            ./build
          key: ${{ runner.os }}-build-${{ github.run_id }}

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' 

      - name: Install Ansible
        run: pip3 install ansible boto boto3

      

      - name: Ansible setup run
        env:
          ANSIBLE_HOST_KEY_CHECKING: False
        working-directory: ./ansible
        run: |
          echo '${{ secrets.SSH_KEY }}' > test.pem
          chmod 400 test.pem
          echo '${{ secrets.VAULT_PASSWORD }}' > vault_password
          mkdir -p group_vars/all/
          echo 'access_key: ${{ secrets.AWS_ACCESS_KEY }}' > group_vars/all/aws.yml
          echo 'secret_key: ${{ secrets.AWS_SECRET_KEY }}' >> group_vars/all/aws.yml
          echo 'session_token: ${{ secrets.AWS_SESSION_TOKEN }}' >> group_vars/all/aws.yml
          ansible-vault encrypt group_vars/all/aws.yml --vault-password-file vault_password
          ansible-playbook ec2_deploy.yml --vault-pass-file vault_password --user ec2-user --key-file test.pem